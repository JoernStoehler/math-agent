#!/usr/bin/env python3
"""
Mock job executor for demo purposes

Simulates job execution by updating job status and logs.
Run this separately when needed for demos.
"""
import asyncio
import json
import sys
from datetime import datetime, timezone
from pathlib import Path

# Add parent directory to path to import math_agent modules
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.math_agent.config import JOBS_DIR
from src.math_agent.core.utils import atomic_write_json


async def mock_job_executor():
    """Simulate job execution for demo"""
    print("Starting mock job executor...")
    print(f"Watching directory: {JOBS_DIR}")
    
    while True:
        await asyncio.sleep(5)
        
        # Check for jobs in setup state
        if JOBS_DIR.exists():
            for job_dir in JOBS_DIR.iterdir():
                if job_dir.is_dir():
                    status_file = job_dir / "status.json"
                    if status_file.exists():
                        with open(status_file, 'r') as f:
                            status = json.load(f)
                        
                        # Simulate starting setup jobs
                        if status["status"] == "setup":
                            print(f"Starting job: {job_dir.name}")
                            
                            status["status"] = "running"
                            status["startedAt"] = datetime.now(timezone.utc).isoformat() + "Z"
                            
                            atomic_write_json(status_file, status)
                            
                            # Add log entry
                            log_file = job_dir / "log.jsonl"
                            log_entry = {
                                "timestamp": status["startedAt"],
                                "type": "message",
                                "role": "assistant",
                                "content": "Starting to work on the problem..."
                            }
                            with open(log_file, 'a') as f:
                                f.write(json.dumps(log_entry) + "\n")
                        
                        # Simulate completing running jobs after 10 seconds
                        elif status["status"] == "running" and "startedAt" in status:
                            started = datetime.fromisoformat(status["startedAt"].rstrip("Z"))
                            elapsed = (datetime.now(timezone.utc) - started).total_seconds()
                            
                            if elapsed > 10:
                                print(f"Completing job: {job_dir.name}")
                                
                                status["status"] = "completed"
                                status["completedAt"] = datetime.now(timezone.utc).isoformat() + "Z"
                                
                                # Create mock solution
                                workspace_dir = job_dir / "workspace"
                                solution_file = workspace_dir / "solution.tex"
                                solution_file.write_text("""\\documentclass{article}
\\begin{document}
\\section{Solution}
This is a mock solution generated by the demo executor.
\\end{document}""")
                                
                                status["solutionTexCreated"] = True
                                
                                atomic_write_json(status_file, status)
                                
                                # Add completion log entry
                                log_entry = {
                                    "timestamp": status["completedAt"],
                                    "type": "message",
                                    "role": "assistant",
                                    "content": "Problem solved! Solution saved to solution.tex"
                                }
                                with open(log_file, 'a') as f:
                                    f.write(json.dumps(log_entry) + "\n")


if __name__ == "__main__":
    print("Mock Job Executor")
    print("=================")
    print("This script simulates job execution for demo purposes.")
    print("Press Ctrl+C to stop.\n")
    
    try:
        asyncio.run(mock_job_executor())
    except KeyboardInterrupt:
        print("\nShutting down mock executor...")